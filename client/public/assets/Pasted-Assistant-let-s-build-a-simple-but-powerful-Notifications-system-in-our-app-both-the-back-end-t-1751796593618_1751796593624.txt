Assistant, let’s build a **simple but powerful** Notifications system in our app—both the back‑end triggers (via Supabase) and the front‑end UI. Overwrite or create code as needed, but keep it lean and maintainable.

---

## 1. Notification Events

Trigger notifications on these key events:
1. **Low‑Stock Alert**  
   - When any product’s quantity falls below its threshold.
2. **New M‑Pesa Payment**  
   - When a pending sale is reconciled via STK Push callback.
3. **Sync Failure**  
   - When the offline‑queue sync fails after 3 retries.

Implement these triggers as:
- **Database Triggers** (Supabase Functions + RLS Policies) that insert into a `notifications` table:
  ```sql
  CREATE TABLE notifications (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    type text NOT NULL,
    title text NOT NULL,
    message text,
    is_read boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    store_id uuid REFERENCES stores(id)
  );
Or handle inserts in your existing Edge Functions / server‑side billing code.

2. Supabase Realtime Subscription
In your React app, subscribe on mount to:

js
Copy
Edit
supabase
  .from(`notifications:store_id=eq.${currentStoreId}`)
  .on('INSERT', payload => addNotificationToState(payload.new))
  .subscribe();
This ensures users see new notifications instantly without polling.

3. Notifications UI
A. Notifications Icon & Badge
TopBar bell icon with a red badge showing the count of is_read = false items.

Clicking it toggles the Notifications panel.

B. Notifications Panel
Slide‑down or slide‑out panel anchored to the bell icon.

Header: “Notifications” and a “Mark all as read” button.

List items styled as cards:

Icon (alert, payment, sync)

Title (bold)

Message (optional subtitle)

Time (2 min ago)

Unread items have a left border in primaryGreen and bold title.

C. Interaction
Clicking an item:

Marks is_read = true in Supabase (.update({ is_read: true })).

Navigates to context page:

Low‑Stock → /inventory?highlight=<productId>

Payment → /sales?invoice=<invoiceNumber>

Sync Error → /settings#sync

“Mark all as read” updates all unread notifications in one Supabase update.

4. Files to Update
Database: Supabase table/migration for notifications.

Edge Functions / Triggers: code to insert into notifications.

components/NotificationsPanel.jsx: panel UI + subscription logic.

components/TopBar.jsx: bell icon + badge + toggle handler.

hooks/useNotifications.js: data fetching, real‑time listener, mark‑read functions.

✅ QA Checklist
 Notifications table exists and RLS allows store‑scoped access.

 Database inserts occur on low stock, payment, and sync error.

 Real‑time subscription pushes new items into React state immediately.

 Bell icon badge count updates correctly.

 Panel UI lists items, marks read/unread visually.

 Clicking items marks them read and navigates to the proper page.

 “Mark all as read” works in one batch.

 Mobile & desktop views render the panel responsively.

Implement these notifications end‑to‑end—simple, effective, and user‑friendly—so dukawalas never miss critical alerts.```








Ask ChatGPT
