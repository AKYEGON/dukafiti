Assistant, please overwrite our authentication/session code to provide robust persistent login and proper logout redirection—no new features, just improved session handling:

1. **Persistent Login**  
   - Change from in‑memory sessions to HTTP‑only, secure cookies (using `express-session` with `cookie: { maxAge: 30*24*60*60*1000, httpOnly: true, secure: true }`).  
   - On frontend, remove any manual localStorage “user” flags; rely solely on server session cookie.  
   - Implement a `/api/me` GET route that returns `{ user: { phone, storeProfile… } }` if authenticated, or 401 if not.

2. **Automatic Rehydration**  
   - In `App.jsx`, on initial mount call `/api/me`.  
     - If 200: store user info in global context/state and let user stay logged in.  
     - If 401: clear any state and redirect to `/login`.  
   - Protect all private routes (`/dashboard`, `/inventory`, `/sales`, `/reports`, `/settings`) using a `RequireAuth` HOC or `<ProtectedRoute>` that checks context, and if unauthenticated, `navigate('/login')`.

3. **Logout Flow**  
   - Update the Logout handler to call POST `/api/logout` which:  
     - Destroys the session on the server.  
     - Clears the cookie.  
   - After the API call returns success, clear client state and immediately `navigate('/')` (home/landing page).

4. **Frontend Redirects & Feedback**  
   - On page reload, if user is still authenticated, stay on current page; if not, redirect to `/login`.  
   - Add a small spinner or “Checking session…” screen while `/api/me` is pending.

5. **QA Checklist**  
   - [ ] After login and page refresh, user remains logged in and sees protected pages.  
   - [ ] If session expires or cookies cleared, protected routes redirect to `/login`.  
   - [ ] Logout destroys session and redirects to home `/`.  
   - [ ] No flicker of protected content before redirect on unauthorized.  
   - [ ] HTTP‑only cookie set with correct maxAge and secure flags.

Generate the updated Express session configuration, `/api/me` and `/api/logout` routes, the React context/HOC or `<ProtectedRoute>` implementation, and the client‑side logic in `App.jsx` for session rehydration and logout redirection.```
