Assistant, our Dashboard page shows live, up‑to‑date records immediately after any CRUD—but our **Inventory** and **Customers** pages only reflect changes after we redeploy on Vercel. We need to harmonize their data‑loading logic with the Dashboard’s. Please:

---

## 1. Identify & Remove Static/Stale Data Sources  
- Search **Inventory.jsx** and **Customers.jsx** for any hard‑coded imports, default props, or build‑time data loads (e.g. JSON files, `getStaticProps`, or cached queries). Delete them.

## 2. Mirror Dashboard’s Runtime Fetch Pattern  
- In both pages, replace their current data hooks with the exact same pattern as Dashboard:
  ```js
  const [items, setItems] = useState([]);
  const user = supabase.auth.getUser().data.user;

  useEffect(() => {
    if (!user) return;
    (async () => {
      const { data, error } = await supabase
        .from('<TABLE>')            // 'products' or 'customers'
        .select('*')
        .eq('store_id', user.id)
        .order('created_at', { ascending: false });
      if (error) console.error(error);
      else setItems(data);
    })();
  }, [user]);
3. Refetch After Every Mutation
In every “add”, “edit”, or “delete” handler on those pages, after the Supabase call succeeds, immediately call the same fetch block to reload the list:

js
Copy
Edit
const { error } = await supabase.from('<TABLE>').insert/ update/ delete(...);
if (!error) {
  await fetchItems();   // re-run the fetch above
}
4. Optional: Real‑Time Subscription
To make updates appear even faster (no need for manual refetch), add the same Supabase realtime subscription used in Dashboard:

js
Copy
Edit
useEffect(() => {
  if (!user) return;
  const channel = supabase
    .from(`<TABLE>:store_id=eq.${user.id}`)
    .on('*', payload => {
      /* INSERT → prepend, UPDATE → map replace, DELETE → filter out */
    })
    .subscribe();
  return () => supabase.removeChannel(channel);
}, [user]);
5. QA Checklist
 Add/Edit/Delete a product/customer on its page: the list updates instantly—no redeploy needed.

 Navigate away and back: the page still shows all items (fetch on mount works).

 Dashboard, Inventory, and Customers now share identical live‑data behavior.

 No console errors; all Supabase errors are logged and surfaced.

Please refactor Inventory.jsx and Customers.jsx as described so they fetch and refresh data at runtime just like the Dashboard.```








Ask ChatGPT
