Assistant, we need a **full offline‐first overhaul** so the app works flawlessly when there’s no network and auto‐syncs without errors when back online. Please implement all of the following in one sweep:

---

## A. Service Worker & Asset Caching  
1. **Register a Service Worker** (`sw.js`) at the project root:
   - Cache on install: app shell (HTML, CSS, JS bundles, logo, key images).  
   - Cache strategy:  
     - **Cache‑first** for shell and static assets.  
     - **Network‑first** for API data (fall back to cache if offline).  
2. **Update `index.js`** (or `main.jsx`) to register `sw.js` on page load.

---

## B. Local Data Store & Offline Queue  
1. **Create `offlineStore.js`** using `localforage` (or IndexedDB wrapper):  
   - Methods: `enqueue(op)`, `getQueue()`, `clearQueue()`.  
2. **Wrap All Mutations**:  
   - In your existing API helpers (sales, inventory, credit), if `!navigator.onLine`, call `enqueue({ endpoint, payload })` instead of Supabase immediately; update UI optimistically.  
   - Otherwise, perform the Supabase call directly.

---

## C. Sync Logic & Event Handling  
1. **`syncQueue()`** function in `offlineStore.js`:  
   - Iterate queued ops in order, replay against Supabase, catch & log errors, then clear the queue.  
2. **Auto‐Sync on Reconnect**:  
   - In `App.jsx` or a top‐level context:  
     ```js
     useEffect(() => {
       const onOnline = () => syncQueue().catch(console.error);
       window.addEventListener('online', onOnline);
       if (navigator.onLine) onOnline();
       return () => window.removeEventListener('online', onOnline);
     }, []);
     ```
3. **Manual Sync Control**:  
   - Add a sync icon/button in `TopBar.jsx`:  
     - Shows pending count badge from `getQueue().length`.  
     - On click, calls `syncQueue()` and shows toast “Sync successful” or “Sync failed: <error>”.

---

## D. Offline/Online UI Feedback  
1. **Offline Banner**: a sticky bar at top when `!navigator.onLine` reading “You are offline—actions will sync when you reconnect.”  
2. **Pending Ops Indicator**: badge on sync button showing number of queued ops.  
3. **Toasts** for:  
   - Queued action (“Sale queued for sync”)  
   - Sync success (“3 actions synced”)  
   - Sync error (“Sync failed for sale #123: network error”)

---

## E. QA & Testing  
- Ensure **Service Worker** caches and serves shell when offline (hard‑refresh with DevTools offline).  
- Perform **CRUD** operations (sale, restock, credit) offline: UI updates, ops queue, no errors in console.  
- Go back online: queue automatically flushes, Supabase reflects changes, toasts appear, badge clears.  
- Manual sync button works when online and when offline (shows error).  
- No uncaught promise rejections, no UI freeze or layout shift.

---

Implement this complete offline‑first architecture—service worker, local queue, sync logic, UI feedback—so the app is robust, seamless offline, and error‑free on sync.```







Ask ChatGPT
