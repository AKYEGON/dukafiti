Assistant, our Dukafiti codebase still has pervasive CRUD bugs—any add/edit/delete only shows up after a Vercel rebuild, and many UI lists aren’t updating correctly. We need a **complete, end‑to‑end audit and fix** so that every data‑driven component fetches, mutates, and displays live data accurately, with immediate UI updates and real‑time syncing. Overwrite or update files as necessary, following these steps:

---

## 1. Audit & Fix All Data Hooks

1. **Identify** every custom hook or `useEffect` that loads data: `useInventory`, `useCustomers`, `useSales`, `useReports`, `useNotifications`.  
2. **Ensure** each hook:
   - Calls Supabase **at runtime** (`.select()`) with `.eq('store_id', user.id)`.
   - Catches and logs errors:  
     ```js
     const { data, error } = await supabase
       .from('products').select('*').eq('store_id', user.id);
     if (error) console.error(error);
     ```
   - Populates state via `setState(data)`.

3. **Dependency Arrays**: verify `useEffect` arrays include **all** variables they reference (e.g. `user.id`, `period`, `query`) so the hook reruns when needed.

---

## 2. Real‑Time Subscriptions Everywhere

- In each hook or top‑level component, after the initial fetch add a Supabase channel subscription:
  ```js
  const channel = supabase
    .from(`products:store_id=eq.${user.id}`)
    .on('*', payload => {
      setProducts(prev => {
        if (payload.eventType === 'INSERT') return [payload.new, ...prev];
        if (payload.eventType === 'UPDATE')
          return prev.map(p => p.id === payload.new.id ? payload.new : p);
        if (payload.eventType === 'DELETE')
          return prev.filter(p => p.id !== payload.old.id);
      });
    })
    .subscribe();
  return () => supabase.removeChannel(channel);
Repeat for customers, sales, and notifications.

3. Mutation Handlers & Optimistic UI
Wrap every insert(), update(), delete() call to:

Optimistically update local state immediately.

Await the Supabase call.

Refetch the list on success to capture any server‑side logic.

Catch & log any error and roll back state if needed.

js
Copy
Edit
const old = products;
setProducts(prev => [...prev, newProduct]); // optimistic
const { error } = await supabase.from('products').insert([...]);
if (error) {
  console.error(error);
  setProducts(old); // rollback
} else {
  fetchProducts(); // fresh data
}
Ensure every mutation also includes .eq('store_id', user.id) or passes store_id in inserts.

4. Remove Build‑Time Data & Stale Cache
Delete any code that imports static JSON or uses SSG/SSP.

Bypass service‑worker cache for API calls (cache: 'no-store') so fetches are always live.

5. UI Feedback & Manual Refresh
Add a Refresh button on each page header that re‑invokes the fetch hook.

Add loading states and disable buttons during mutations.

Show toasts on success/error to confirm operations.

6. End‑to‑End Testing
Multi‑Tab Test: perform CRUD in one tab, confirm other tab updates instantly.

Offline Test: queue operations offline, reconnect and verify sync and UI update.

Error Handling: induce a policy error (wrong store_id) and verify error is logged and shown.

QA Checklist
 Inventory, Customers, Sales, Reports, Notifications all load live data on mount.

 Any add/edit/delete is reflected in the UI immediately—no redeploy required.

 Real‑time subscriptions keep multiple clients in sync.

 Hooks rerun correctly when dependencies change.

 No static/demo data remains; all fetches are runtime.

 All Supabase errors are surfaced in console/toast.

Please perform this deep analysis and apply these fixes so Dukafiti’s CRUD flows are truly dynamic and error‑free.```








Ask ChatGPT
