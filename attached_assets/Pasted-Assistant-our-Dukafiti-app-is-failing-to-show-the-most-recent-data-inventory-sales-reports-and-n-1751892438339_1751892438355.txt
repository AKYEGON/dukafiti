Assistant, our Dukafiti app is failing to show the most recent data—inventory, sales, reports, and notifications lag or require manual refresh—and I need a **very deep** audit plus a **complete fix** so updates propagate **immediately** and **accurately**. Overwrite code as necessary, and follow this rigorous plan:

---

## 1. Global State & Data‑Fetching Audit

1. **Identify All Data Hooks**  
   - Locate every custom hook or `useEffect` that fetches data: `useInventory`, `useSales`, `useCustomers`, `useReports`, `useNotifications`.
2. **Inspect Fetch Logic**  
   - Ensure each uses `async/await` correctly, handles errors, and sets state only when the latest fetch completes (cancel stale requests if new query begins).
3. **Dependency Arrays**  
   - For each `useEffect`, confirm the dependency array includes all variables used inside (e.g. `storeId`, `period`, `query`).  
   - Prevent stale closures by binding functions to current state or memoizing them.

---

## 2. Real‑Time Subscriptions Everywhere

1. **Supabase Channels**  
   - For each data domain, subscribe to the Supabase real‑time channel:
     - **Inventory**: `products` on `INSERT | UPDATE | DELETE` for `store_id`.
     - **Sales**: `sales` and `sale_items` on `INSERT`.
     - **Customers/Credit**: `customers` on `UPDATE` (balance changes).
     - **Notifications**: `notifications` on `INSERT`.
2. **State Updates on Events**  
   - In each subscription handler, update the corresponding React state:
     ```js
     supabase
       .from('products:store_id=eq.' + storeId)
       .on('UPDATE', payload => {
         setProducts(prev => prev.map(p => p.id === payload.new.id ? payload.new : p));
       })
       .subscribe();
     ```
3. **Unsubscribe on Unmount**  
   - Always clean up subscriptions in the `useEffect` return to prevent duplicates and memory leaks.

---

## 3. Optimistic UI & Queue Flushing

1. **Optimistic Updates**  
   - For actions (new sale, restock, credit), update local state immediately before the network call.  
2. **Queue & Sync Reliability**  
   - Ensure the offline queue (if used) flushes on reconnect **before** any new fetches so that the UI sees the reconciled data promptly.

---

## 4. Component‑Level Refresh Triggers

1. **Manual Refresh Buttons**  
   - Add an optional “Refresh” icon on each page header that calls the fetch hook again.
2. **Auto‑Refresh on Focus**  
   - Use the Page Visibility API (`visibilitychange`) to re‑fetch data when the user returns to the tab.

---

## 5. Testing & Verification

1. **Unit Tests for Hooks**  
   - Write Jest tests (or update existing) to mock Supabase and assert that:
     - Initial fetch returns correct data.
     - Subscription callbacks update state correctly.
     - Stale fetches are canceled.
2. **Integration Tests**  
   - Simulate inserting/updating via Supabase’s JS client and verify components re‑render with new data.
3. **Manual QA**  
   - On Inventory/Sales/Reports/Notifications pages:
     - Perform an action in one tab (e.g. add sale) and confirm another tab receives the update <2 sec.
   - Simulate offline, queue operations, reconnect, and ensure data syncs and reflects immediately.

---

## 6. Deep Cleanup & Linting

- Run **ESLint** with `--max-warnings=0` to catch logic errors.
- Run **Prettier** to ensure formatting consistency.
- Remove any leftover test or placeholder code that might be interfering with real‑time flows.

---

### Deliverables

- Updated custom hooks (`useInventory`, `useSales`, etc.) with correct dependency arrays and subscription logic.
- Cleaned and consistent `syncQueue` + optimistic state updates.
- “Refresh” triggers and focus‑based auto‑fetch.
- Test suite additions covering fetch + real‑time.
- A short report summarizing:
  - Issues found in each domain.
  - Changes made to fix them.

Please perform this exhaustive review and overhaul so Dukafiti always reflects the latest data in real time, with no user intervention.```
