Assistant, enhance the **Sales** page with a “Quick‑Select Products” panel showing the user’s most frequently sold items. This panel should live above the mini‑cart and look like a horizontal scrollable strip of buttons or cards. Here’s the full spec—please generate all React, styling, state, and backend code:

1. **Backend – Frequent Products Endpoint**  
   - Create a new Express GET route at `/api/products/frequent` that:  
     • Reads all past sales from the database.  
     • Aggregates total quantity sold per `productId`.  
     • Sorts products by descending total sold.  
     • Returns the top 8 products as an array of `{ id, name, price }`.  

2. **Frontend – Quick‑Select Panel Component**  
   - Create a `<QuickSelectPanel />` React component that on mount:  
     • Fetches `/api/products/frequent` and stores the array in state.  
     • Renders each product as a pill‑shaped button showing the product’s name and unit price (e.g. “Sukari | KES 50”).  
   - Style the panel as:  
     • A horizontal overflow container (`overflow-x-auto`) with padding.  
     • Buttons with Tailwind classes `px-3 py-2 mx-1 bg-gray-800 rounded-full text-white text-sm`.  
     • On hover or focus, the button’s background changes to green (`bg-green-600`).  
   - Above the panel, render a heading “Quick‑Select Products” in green text.

3. **Integration – Adding to Cart**  
   - When a user taps a product button:  
     • The product is added to the mini‑cart with quantity = 1, or if it’s already in the cart, increment its quantity by 1.  
     • Update the cart’s state accordingly and recalculate the grand total.  
     • Show a subtle toast “Added [Product Name] to cart” in green.  
   - Ensure rapid taps queue correctly (e.g., debounced or allow multiple quick taps).

4. **State & UX Considerations**  
   - The panel should remain visible at all times on the Sales page, even when the cart has multiple items.  
   - If `/api/products/frequent` returns an empty array, hide the panel.  
   - Ensure mobile‑first design: the pills should wrap nicely on very narrow screens, with horizontal scroll if needed.

5. **Backend Data Maintenance**  
   - Update the existing POST `/api/sales` route so that after each successful sale, it updates the aggregate counts used by `/api/products/frequent`.  
   - You can maintain a separate “salesCount” field per product in the database, incremented by the sale quantity each time a product is sold.

Please provide all necessary code:  
- Express route for `/api/products/frequent` and updates to your sales handler for salesCount maintenance.  
- The `<QuickSelectPanel />` React component (including fetch logic, state hooks, and click handlers).  
- Styling (Tailwind CSS or equivalent) to match our green (#00AA00)/black theme.  
- Integration points in the Sales page so the panel appears above the cart.  
- Any utility functions needed to increment quantities and manage the cart state.  
