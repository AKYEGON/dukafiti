Assistant, I’ve completed Phases 0–2 and need a thorough, atomic audit of everything so far—schema, RLS, AuthContext, Supabase client, routing, and the `useLiveData` hook. Please analyze line‑by‑line and report any issues or gaps:

---

## Phase 0–2 Audit Checklist

### 1. Project Structure  
- Confirm only the minimal files remain from Phase 0:
  - `src/main.tsx`, `src/App.tsx`
  - `public/index.html`
  - Configs (`package.json`, `vite.config.js`, `tailwind.config.js`)
  - New folders: `lib/`, `contexts/`, `hooks/`, `components/`, `pages/`

### 2. Supabase Client (`src/lib/supabase.ts`)  
- Validate `supabase` is initialized with `import.meta.env.VITE_SUPABASE_*`.
- Ensure no extra plugins or caching are enabled.

### 3. AuthContext (`src/contexts/AuthContext.tsx`)  
- On mount, fetch initial session correctly.
- `onAuthStateChange` listener unsubscribes properly.
- `useAuth()` returns `user` and updates on login/logout.

### 4. Routing & MainLayout (`src/App.tsx`, `components/MainLayout.tsx`)  
- All routes (`/login`, `/`, `/inventory`, `/customers`) are defined.
- `MainLayout` wraps protected pages—no static placeholders.
- No stray imports of old pages.

### 5. RLS & Schema (Supabase SQL)  
- For each table (`products`, `customers`, etc.):
  - `store_id` column exists and default is `auth.uid()`.
  - RLS is **enabled**.
  - Admin bypass policy uses correct admin UID.
  - Tenant isolation policy includes both `USING` and `WITH CHECK`.

### 6. `useLiveData` Hook (`src/hooks/useLiveData.ts`)  
- Dependency array is `[user, table]`—fetch runs exactly once per user change.
- Initial fetch ignores stale mounts.
- Realtime `.subscribe()` listens to `INSERT`, `UPDATE`, `DELETE` properly.
- Cleanup unsubscribes correctly.

### 7. Verification Scenarios  
- **Manual Console Test**: In Supabase UI, insert/update/delete a row—watch the UI update.
- **Two‑Tab Test**: Mutate in one tab, see change in the other without reload.
- **Auth Test**: Log out/in—ensure `useLiveData` clears or refetches.

---

Please run this deep audit and return:

1. **Any build or runtime errors** found.
2. **Lint or TypeScript warnings** you discover.
3. **Missing or incorrect logic** in the above areas.
4. **Recommended fixes** (atomic code snippets or SQL statements) for each issue.

Once we confirm Phases 0–2 are rock‑solid, we’ll proceed to Phase 3.```
