Assistant, we’re still seeing data vanish on page navigations—Inventory items disappear after you leave and return, and new customers never show up. We need an **atomic, line‑by‑line audit and fix** of our entire CRUD flow so every mutation truly persists and displays immediately. Please perform these steps in-depth:

---

## 1. Remove All Static & Seed Data

- Search for any hard‑coded imports (e.g. `import products from '…/data/products.json'`) and delete them.
- Confirm there are **no** initial data inserts in any `useEffect`, initialization scripts, or build‑time code.

---

## 2. Ensure Runtime Fetch on Every Page

For both `Inventory.jsx` and `Customers.jsx`:

1. **Hook Setup**  
   ```js
   const [items, setItems] = useState([]);
   const user = supabase.auth.getUser()?.data.user;

   useEffect(() => {
     if (!user) return; 
     fetchItems();
   }, [user]);
Fetch Function

js
Copy
Edit
async function fetchItems() {
  const { data, error } = await supabase
    .from('products')                // or 'customers'
    .select('*')
    .eq('store_id', user.id)
    .order('created_at', { ascending: false });
  if (error) console.error('Fetch error:', error);
  else setItems(data);
}
Render

jsx
Copy
Edit
{items.length > 0 
  ? items.map(item => <ItemCard key={item.id} item={item} />)
  : <EmptyState message="No items." />
}
3. Mutation Handlers with Store ID & Refetch
In your add/edit/delete functions:

Include store_id

js
Copy
Edit
const payload = { 
  name, price, /* etc */, 
  store_id: user.id 
};
Optimistic Update + Refetch

js
Copy
Edit
const old = items;
setItems(prev => [newItem, ...prev]);         // optimistic
const { error } = await supabase
  .from('products')                           // or 'customers'
  .insert([payload]);
if (error) {
  console.error('Insert error:', error);
  setItems(old);                              // rollback
} else {
  await fetchItems();                         // fresh data
}
Error Visibility

Always log error.message and show a toast so you know if RLS or schema blocks it.

4. Real‑Time Subscriptions
In each hook:

js
Copy
Edit
useEffect(() => {
  if (!user) return;
  fetchItems();
  const channel = supabase
    .from(`products:store_id=eq.${user.id}`)
    .on('*', payload => {
      setItems(prev => {
        if (payload.eventType === 'INSERT') return [payload.new, ...prev];
        if (payload.eventType === 'UPDATE') return prev.map(x => x.id === payload.new.id ? payload.new : x);
        if (payload.eventType === 'DELETE') return prev.filter(x => x.id !== payload.old.id);
      });
    })
    .subscribe();
  return () => supabase.removeChannel(channel);
}, [user]);
Repeat for customers.

5. RLS Policy & Schema Check
Run in Supabase SQL Editor for both tables:

sql
Copy
Edit
-- Ensure store_id column exists
ALTER TABLE products ADD COLUMN IF NOT EXISTS store_id uuid;
ALTER TABLE customers ADD COLUMN IF NOT EXISTS store_id uuid;

-- Enable RLS
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE customers ENABLE ROW LEVEL SECURITY;

-- Policies for products
CREATE POLICY sel_prod ON products FOR SELECT USING (store_id = auth.uid());
CREATE POLICY ins_prod ON products FOR INSERT WITH CHECK (store_id = auth.uid());
CREATE POLICY upd_prod ON products FOR UPDATE USING (store_id = auth.uid()) WITH CHECK (store_id = auth.uid());
CREATE POLICY del_prod ON products FOR DELETE USING (store_id = auth.uid());

-- Repeat for customers with policies sel_cust, ins_cust, upd_cust, del_cust
6. Service Worker & Cache Bypass
Confirm your service worker (sw.js) does not cache API calls permanently. Use:

js
Copy
Edit
fetch(request, { cache: 'no-store' });
Bump cache version on deploy to force clients to load new code.

7. Testing & Verification
Add a product/customer → should appear immediately on the same page.

Navigate away and back → item still listed.

Edit/delete → UI updates instantly without reload.

Open a second tab → perform an action in one and verify the other updates via real‑time.

Check console for no hidden Supabase errors or policy rejections.

Please apply these atomic fixes across all relevant files so that CRUD operations are truly live, consistent, and error‑free in our Dukafiti app.```








