Assistant, the dashboard shows products and customers correctly, but the **Inventory** and **Customers** pages remain empty—clearly our data‑fetch/display logic is broken post‑RLS. Please perform a **very deep audit** and fix across the entire data‑flow so that:

---

## 1. Verify RLS Policies & Schema Integrity

1. **Check `store_id` Column**  
   - For each table (`products`, `customers`), confirm `store_id uuid` exists and is populated on INSERT.
2. **Policy Coverage**  
   - Ensure you have **four** policies per table:  
     - `SELECT` (USING `store_id = auth.uid()`)  
     - `INSERT` (WITH CHECK `store_id = auth.uid()`)  
     - `UPDATE` (USING & WITH CHECK `store_id = auth.uid()`)  
     - `DELETE` (USING `store_id = auth.uid()`)  

Run these SQL snippets in Supabase SQL Editor for both tables:
```sql
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Select own products" ON products FOR SELECT USING (store_id = auth.uid());
CREATE POLICY "Insert own products" ON products FOR INSERT WITH CHECK (store_id = auth.uid());
CREATE POLICY "Update own products" ON products FOR UPDATE USING (store_id = auth.uid()) WITH CHECK (store_id = auth.uid());
CREATE POLICY "Delete own products" ON products FOR DELETE USING (store_id = auth.uid());
Repeat for customers.

2. Front‑end Fetch Logic & Hook Audit
Supabase Client Context

Confirm supabaseClient.js is correctly initialized and that supabase.auth.getUser() (or auth.getSession) returns the current user’s UID.

Data Hooks (useInventory, useCustomers)

Ensure on mount each hook:

Retrieves user = supabase.auth.user() (or equivalent).

Calls supabase.from('products').select('*').eq('store_id', user.id) and sets state.

Handles errors—log error.message if data is null.

Verify the useEffect dependency arrays include user.id so re-fetch occurs after login.

Component Rendering

In Inventory.jsx and Customers.jsx, ensure they consume the hook’s state (e.g. products or customers) correctly:

jsx
Copy
Edit
const { data: products, error } = useInventory();
if (error) return <ErrorMsg error={error.message} />;
return products.length
  ? products.map(p => <ProductCard key={p.id} product={p} />)
  : <EmptyState message="No products yet." />;
Remove Any Stale Caching

If you used a service worker or local cache, ensure the API calls bypass caches in dev (e.g. fetch(..., { cache: 'no-store' })) so you see up‑to‑date results.

3. Real‑Time Subscriptions (If Desired)
Optionally, wire Supabase real‑time for immediate UI updates:

js
Copy
Edit
supabase.from(`products:store_id=eq.${user.id}`).on('*', payload => {
  // update local products state based on payload.eventType
}).subscribe();
4. End‑to‑End Testing
Insert via Dashboard

Add a new product/customer in the Dashboard—watch the Supabase table to confirm store_id is correctly set.

Fetch on Pages

Navigate to Inventory/Customers pages—ensure the new items appear immediately.

Error Visibility

Introduce a deliberate policy error (e.g. wrong store_id) and confirm your code surfaces the Supabase error in the UI console.

5. Clean‑Up & Remove Seed Code
Remove any leftover demo or seed data inserts in your React code that might pollute state or override live fetches.

QA Checklist
 After adding a product or customer, it shows up on its page without redeploy.

 No empty states unless truly empty.

 Supabase errors (e.g. policy violations) are caught and logged.

 Hooks and components follow React best practices (correct useEffect deps).

 No stale service‑worker or cache interference.

Please perform this deep audit and overhaul so Inventory and Customers pages always display the latest user‑specific data.```