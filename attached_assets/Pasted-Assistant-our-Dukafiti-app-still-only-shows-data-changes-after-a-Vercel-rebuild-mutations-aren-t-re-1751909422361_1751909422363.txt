Assistant, our Dukafiti app still only shows data changes after a Vercel rebuild—mutations aren’t reflected live. Please perform a **complete runtime‑data overhaul** so that every CRUD action updates immediately without any rebuild:

---

## 1. Remove Build‑Time & Static Data  
- Delete any imports of `.json` or seed files.  
- Remove any SSG/SSP logic (`getStaticProps`, `import … from '/data'`) so all data is fetched in the browser.

## 2. Fetch on Mount & Refetch After Mutations  
- In **every** page/component that lists data (Inventory, Customers, Sales, Reports, Notifications):
  1. Wrap your Supabase `.select()` call inside a `useEffect(() => { fetchData(); }, [user])`, where `fetchData()`:
     - Calls `supabase.from(...).select('*').eq('store_id', user.id)`.
     - Logs any errors and calls `setState(data)`.
  2. In **every** mutation handler (insert/update/delete):
     - Perform the Supabase call (`await supabase.from(...).insert/update/delete(...)`).
     - Check for `error` and log it.
     - **Immediately** call `fetchData()` again to refresh the list.

## 3. Add Real‑Time Subscriptions  
- In each data hook/component, after `fetchData()` subscribe to Supabase realtime on that table:
  ```js
  const channel = supabase
    .from(`tableName:store_id=eq.${user.id}`)
    .on('*', payload => updateLocalState(payload))
    .subscribe();
  return () => supabase.removeChannel(channel);
updateLocalState should handle INSERT, UPDATE, DELETE by merging into your array state.

4. Bypass Any Caching
If you have a service worker or global fetch caching, configure it to never cache API calls:

js
Copy
Edit
fetch(url, { cache: 'no-store' });
Ensure Supabase client is not using any persistent cache plugin.

5. UI Feedback & Manual Refresh
Add a “Refresh” button in each page header that triggers fetchData().

Show a loading spinner during fetch and disable mutation buttons while pending.

Display toast notifications on success/error of every mutation.

QA Checklist
✅ Mutations (add/edit/delete) show up instantly in UI with no rebuild.

✅ Real‑time updates propagate across multiple open tabs.

✅ No hard‑coded or build‑time data remains.

✅ All Supabase errors are surfaced in console/toast.

✅ Manual “Refresh” button loads the latest data on demand.

Please apply these changes across our entire React codebase so the app always reflects the latest data immediately.```








Ask ChatGPT
