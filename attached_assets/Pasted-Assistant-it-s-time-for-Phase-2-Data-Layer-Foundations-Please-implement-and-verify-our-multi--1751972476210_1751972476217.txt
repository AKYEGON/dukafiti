Assistant, it’s time for **Phase 2: Data Layer Foundations**. Please implement and verify our multi‑tenant schema and the core data‑loading hook:

---

## 1. Supabase Schema & RLS

1. **Ensure `store_id` Column**  
   In the Supabase SQL editor, for each table (`products`, `customers`, `sales`, `notifications`, `settings`):
   ```sql
   ALTER TABLE <table> ADD COLUMN IF NOT EXISTS store_id uuid NOT NULL DEFAULT auth.uid();
Enable RLS

sql
Copy
Edit
ALTER TABLE <table> ENABLE ROW LEVEL SECURITY;
Admin Bypass Policy
(Replace <ADMIN_UID> with your admin user’s UID)

sql
Copy
Edit
CREATE POLICY "Admin full access" ON <table>
FOR ALL
USING (auth.uid() = '<ADMIN_UID>');
Tenant Isolation Policy

sql
Copy
Edit
CREATE POLICY "Tenants only own data" ON <table>
FOR ALL
USING (store_id = auth.uid())
WITH CHECK (store_id = auth.uid());
Repeat for every table.

2. Generic useLiveData Hook
Create src/hooks/useLiveData.ts:

ts
Copy
Edit
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';

export default function useLiveData<T>(table: string) {
  const { user } = useAuth();
  const [items, setItems] = useState<T[]>([]);

  useEffect(() => {
    if (!user) return;
    let mounted = true;

    // Initial runtime fetch
    (async () => {
      const { data, error } = await supabase
        .from<T>(table)
        .select('*')
        .eq('store_id', user.id)
        .order('created_at', { ascending: false });
      if (error) console.error(`${table} fetch error:`, error);
      else if (mounted) setItems(data);
    })();

    // Realtime subscription
    const channel = supabase
      .from<T>(`${table}:store_id=eq.${user.id}`)
      .on('*', payload => {
        setItems(prev => {
          if (payload.eventType === 'INSERT') return [payload.new, ...prev];
          if (payload.eventType === 'UPDATE') return prev.map(i => i.id === payload.new.id ? payload.new : i);
          if (payload.eventType === 'DELETE') return prev.filter(i => i.id !== payload.old.id);
          return prev;
        });
      })
      .subscribe();

    return () => {
      mounted = false;
      supabase.removeChannel(channel);
    };
  }, [user, table]);

  return items;
}
3. Verification Steps
In Supabase console, manually INSERT a row into products (without your app) and confirm it only appears for the matching store_id.

In a bare‑bones test page:

tsx
Copy
Edit
import useLiveData from '../hooks/useLiveData';
export default function Test() {
  const products = useLiveData<Product>('products');
  return <pre>{JSON.stringify(products, null, 2)}</pre>;
}
Insert/update/delete in the console and verify the list updates live in your app.

Once confirmed, mark Phase 2 as done in build-progress.json and we’ll move to building Inventory.```








Ask ChatGPT
