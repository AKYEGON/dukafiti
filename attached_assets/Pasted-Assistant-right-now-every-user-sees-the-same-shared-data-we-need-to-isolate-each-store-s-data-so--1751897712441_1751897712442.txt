Assistant, right now every user sees the same shared data— we need to isolate each store’s data so **each Supabase Auth user only sees and mutates their own records**, and completely remove any hard‑coded or seed inserts. Implement full Row‑Level Security (RLS) and audit our codebase end‑to‑end:

---

## 1. Enable RLS on All Tables

In Supabase SQL Editor, for each table (`products`, `sales`, `customers`, `notifications`, `settings`, etc.) run:

```sql
-- 1. Enable RLS
ALTER TABLE <table_name> ENABLE ROW LEVEL SECURITY;

-- 2. Create a policy for owners
CREATE POLICY "Users manage their own <table_name>" ON <table_name>
  FOR ALL
  USING (auth.uid() = store_id);
Replace <table_name> with each table name, and ensure each table has a store_id uuid REFERENCES users(id) column.

2. Add store_id Foreign Key
Audit each table schema; if store_id doesn’t exist, add it:

sql
Copy
Edit
ALTER TABLE <table_name>
ADD COLUMN store_id uuid NOT NULL DEFAULT auth.uid();
Migrate existing rows by setting store_id = auth.uid() for exports or drop them if they’re just test data.

3. Remove Seed/Insert Commands
Search the codebase for any hard‑coded inserts, seeds, or “onInit” scripts that populate demo data (e.g. supabase.from('products').insert(...) in initialization).

Delete those lines so no data is created automatically upon signup or startup.

4. Front‑end Auth Context
In supabaseClient.js, ensure you call:

js
Copy
Edit
supabase.auth.onAuthStateChange((event, session) => {
  // store session.user.id as storeId in React context
});
Pass storeId = session.user.id into all queries:

js
Copy
Edit
supabase
  .from('products')
  .select('*')
  .eq('store_id', storeId);
5. Audit All CRUD Hooks
For each data‑access hook or helper:

Read: Always filter by .eq('store_id', storeId).

Write: Always include store_id: storeId in inserts and upserts.

Update/Delete: Include .eq('store_id', storeId) in the predicate.

6. Testing & Verification
Sign up two distinct users; in one, add products/sales; log out and into the other—ensure data is empty.

Attempt to fetch or delete another store’s data via direct Supabase calls—must be denied by RLS.

Manual QA: Confirm no unauthorized data leaks and that the UI reflects only the current user’s records.

QA Checklist
 RLS enabled on every table with correct store_id policies.

 All tables have a store_id column filled at insert time.

 No seed/demo inserts remain.

 Front‑end queries always filter by the logged‑in user’s ID.

 Unauthorized cross‑store queries are blocked by Supabase.

 Two users see completely separate datasets in the UI.

Please perform this deep audit and implement full RLS isolation so each account only ever sees its own data.```








Ask ChatGPT
