Assistant, fully enhance the **Top Bar** to include a smart universal search, notification bell, and profile dropdown—making each element fully interactive. Please generate all React components, styling, state management, and backend endpoints needed:

1. **Smart Universal Search**  
   - Place a sticky search input (with a search icon) centered in the top bar.  
   - As the user types, debounce (300 ms) and call `/api/search?q=…` which returns mixed results: products, customers, orders, reports.  
   - Display a dropdown below the input showing up to 7 results grouped by category with headers (“Products”, “Customers”, “Orders”, “Reports”).  
   - Each result should be clickable, navigating to its detail page (`/inventory/:id`, `/customers/:id`, `/orders/:id`, `/reports/:id`).  
   - Allow arrow‑key navigation through the dropdown and “Enter” to select.  
   - Animate the dropdown open/close (`opacity` + `scale`) over 150 ms.

2. **Notification Bell**  
   - On the right side of the top bar, add a bell icon button with a red badge showing the count of unread notifications (fetched from `/api/notifications/unread-count`).  
   - Clicking the bell opens a dropdown panel listing the 5 most recent notifications from `/api/notifications?limit=5`, each with text, timestamp, and a “Mark as read” button.  
   - Provide a “View all” link at the bottom to `/notifications`.  
   - When a notification is clicked or “Mark as read” is tapped, send POST `/api/notifications/:id/read`, remove it from the badge count, and update the dropdown list in real time.

3. **Profile Menu & Dropdown**  
   - Next to the bell, display the user’s avatar (or initials) in a circular button.  
   - Clicking opens a dropdown with:  
     • “My Profile” → `/profile`  
     • “Settings” → `/settings`  
     • “Help & Support” → `/support`  
     • Divider  
     • “Logout” → calls POST `/api/logout` and redirects to `/login`.  
   - Highlight hovered items with the purple accent background, and ensure the dropdown closes when clicking outside.

4. **Responsive Layout & Accessibility**  
   - On mobile, collapse the profile dropdown into an avatar‑only menu, and collapse search into a full‑screen overlay when tapped.  
   - Ensure all buttons and inputs are keyboard‑accessible, have appropriate aria attributes, and the dropdowns trap focus while open.  
   - Use Tailwind CSS for styling: black background, white text, green/purple accents.

Please generate:  
- The top bar React component (e.g. `TopBar.jsx`) with all internal state and event handlers.  
- The `/api/search`, `/api/notifications/unread-count`, `/api/notifications`, and `/api/notifications/:id/read` Express routes and mock data logic.  
- CSS/Tailwind classes or config updates.  
- Any utility hooks (e.g. `useDebounce`, `useOutsideClick`) needed for functionality.  
- Integration instructions to include the TopBar component in `App.jsx` so it appears on every page.  
